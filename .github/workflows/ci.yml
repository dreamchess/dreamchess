name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
  release:
    types: [created]

permissions:
  contents: read

env:
  BUILD_TYPE: Release

jobs:
  ubuntu:
    name: Ubuntu
    runs-on: ubuntu-latest

    steps:
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install gettext libfreetype-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libglew-dev

    - uses: actions/checkout@v3

    - name: Configure
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: cmake --build build

  msys2:
    name: MSYS2
    runs-on: windows-latest

    strategy:
      matrix:
        sys:
          - mingw64
          - clang64

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.sys }}
        install: base-devel
        pacboy: toolchain:p cmake:p gettext:p freetype:p SDL2:p SDL2_image:p SDL2_mixer:p expat:p glew:p

    - uses: actions/checkout@v3

    - name: Configure
      shell: msys2 {0}
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      shell: msys2 {0}
      run: cmake --build build

  windows:
    name: Windows
    runs-on: windows-2022

    permissions:
      contents: write

    strategy:
      matrix:
        include:
        - name: 64-bit
          arch: x64
        - name: 32-bit
          arch: Win32

    env:
      ZIP_ASSET_LABEL: Windows 10 (${{ matrix.name }}, ZIP)
      MSI_ASSET_LABEL: Windows 10 (${{ matrix.name }}, Installer)

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        choco install -y winflexbison3
        Invoke-WebRequest -Uri https://github.com/vslavik/gettext-tools-windows/releases/download/v0.22.5/gettext-tools-windows-0.22.5.zip -OutFile .\gettext-tools.zip
        Expand-Archive -LiteralPath .\gettext-tools.zip

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure
      run: cmake -B build -G "Visual Studio 17 2022" -A ${{ matrix.arch }} -DCMAKE_PROGRAM_PATH="${{ github.workspace }}\gettext-tools\bin" -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: Create packages
      run: |
        cd build
        cpack -G ZIP -C ${{ env.BUILD_TYPE }}
        cpack -G WIX -C ${{ env.BUILD_TYPE }}

    - name: Upload zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_ASSET_LABEL }}
        path: build/*.zip

    - name: Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.MSI_ASSET_LABEL }}
        path: build/*.msi

    - name: Upload release packages
      if: github.event_name == 'release'
      uses: actions/github-script@v6
      with:
        script: |
          process.chdir('build')

          const fs = require('fs')
          const globber = await glob.create('*.zip\n*.msi')

          for await (const file of globber.globGenerator()) {
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              name: file,
              label: file.includes('.zip') ? process.env.ZIP_ASSET_LABEL : process.env.MSI_ASSET_LABEL,
              data: await fs.readFileSync(file)
            })
          }

  macos:
    name: macOS
    runs-on: macOS-14

    permissions:
      contents: write

    strategy:
      matrix:
        include:
        - name: Intel
          target: 10.11
          arch: x86_64
          triplet: x64-osx-dynamic
        - name: Apple Silicon
          target: 11
          arch: arm64
          triplet: arm64-osx-dynamic

    env:
      DMG_ASSET_LABEL: macOS ${{ matrix.target }}+ (${{ matrix.name }})
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.target }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Ninja
      run: brew install ninja

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"

    - name: Build
      run: cmake --build build

    - name: Create package
      run: |
        cd build
        cpack -G DragNDrop -C ${{ env.BUILD_TYPE }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DMG_ASSET_LABEL }}
        path: build/*.dmg

    - name: Upload release package
      if: github.event_name == 'release'
      uses: actions/github-script@v6
      with:
        script: |
          process.chdir('build')

          const fs = require('fs')
          const globber = await glob.create('*.dmg')

          for await (const file of globber.globGenerator()) {
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              name: file,
              label: process.env.DMG_ASSET_LABEL,
              data: await fs.readFileSync(file)
            })
          }
